#include <iostream>
#include <oqs/oqs.h>
#include <chrono>
#include <vector>

#define MESSAGE_LEN 2500
#define NUM_ITERATIONS 10

std::vector<int64_t> sign_times;
std::vector<int64_t> verify_times;

void get_average_sign_time(unsigned long long &average_sign_time) {

	uint64_t total = 0;
	
	for(int64_t i : sign_times)
		total += i;

	average_sign_time = total / sign_times.size();

}

void get_average_verify_time(unsigned long long &average_verify_time) {

	uint64_t total = 0;
	
	for(int64_t i : verify_times)
		total += i;

	average_verify_time = total / verify_times.size();

}

void falcon_tests(unsigned long long &average_sign_time, unsigned long long &average_verify_time, uint32_t n) {
	
	for(int i = 0; i < n; i++) {
		
		if(i % 100 == 0)
			std::cout<< "\t" << i << "/" << NUM_ITERATIONS << " complete" << std::endl;

		OQS_STATUS rc;

	        uint8_t public_key[OQS_SIG_falcon_512_length_public_key];
	        uint8_t secret_key[OQS_SIG_falcon_512_length_secret_key];
	        uint8_t message[MESSAGE_LEN];
	        uint8_t signature[OQS_SIG_falcon_512_length_signature];
	        size_t message_len = MESSAGE_LEN;
	        size_t signature_len;
	
	        // let's create a random test message to sign
	        OQS_randombytes(message, message_len);
	
	        rc = OQS_SIG_falcon_512_keypair(public_key, secret_key);
	        if (rc != OQS_SUCCESS) {
       	       		exit(EXIT_FAILURE);
	       	}
	
		auto start = std::chrono::high_resolution_clock::now();
 
		rc = OQS_SIG_falcon_512_sign(signature, &signature_len, message, message_len, secret_key);
	
	        auto stop = std::chrono::high_resolution_clock::now();
		sign_times.push_back(std::chrono::duration_cast<std::chrono::microseconds>(stop - start).count());

		start = std::chrono::high_resolution_clock::now();
	
		rc = OQS_SIG_falcon_512_verify(message, message_len, signature, signature_len, public_key);
		if (rc != OQS_SUCCESS) {
			exit(EXIT_FAILURE);
		}
			
	
	        stop = std::chrono::high_resolution_clock::now();
		verify_times.push_back(std::chrono::duration_cast<std::chrono::microseconds>(stop - start).count());

	}

	get_average_sign_time(average_sign_time);
	get_average_verify_time(average_verify_time);
}


void dilithium_tests(unsigned long long &average_sign_time, unsigned long long &average_verify_time, uint32_t n) {
	
	for(int i = 0; i < n; i++) {
		
		if(i % 100 == 0)
			std::cout<< "\t" << i << "/" << NUM_ITERATIONS << " complete" << std::endl;

		OQS_STATUS rc;

	        uint8_t public_key[OQS_SIG_dilithium_2_length_public_key];
	        uint8_t secret_key[OQS_SIG_dilithium_2_length_secret_key];
	        uint8_t message[MESSAGE_LEN];
	        uint8_t signature[OQS_SIG_dilithium_2_length_signature];
	        size_t message_len = MESSAGE_LEN;
	        size_t signature_len;
	
	        // let's create a random test message to sign
	        OQS_randombytes(message, message_len);
	
	        rc = OQS_SIG_dilithium_2_keypair(public_key, secret_key);
	        if (rc != OQS_SUCCESS) {
       	       		exit(EXIT_FAILURE);
	       	}
	
		auto start = std::chrono::high_resolution_clock::now();
 
		rc = OQS_SIG_dilithium_2_sign(signature, &signature_len, message, message_len, secret_key);
	
	        auto stop = std::chrono::high_resolution_clock::now();
		sign_times.push_back(std::chrono::duration_cast<std::chrono::microseconds>(stop - start).count());

		start = std::chrono::high_resolution_clock::now();
	
		rc = OQS_SIG_dilithium_2_verify(message, message_len, signature, signature_len, public_key);
		if(rc != OQS_SUCCESS) {
			exit(EXIT_FAILURE);	
		}

	
	        stop = std::chrono::high_resolution_clock::now();
		verify_times.push_back(std::chrono::duration_cast<std::chrono::microseconds>(stop - start).count());

	}

	get_average_sign_time(average_sign_time);
	get_average_verify_time(average_verify_time);
}


void sphincs_tests(unsigned long long &average_sign_time, unsigned long long &average_verify_time, uint32_t n) {
	
	for(int i = 0; i < n; i++) {
		
		if(i % 100 == 0)
			std::cout<< "\t" << i << "/" << NUM_ITERATIONS << " complete" << std::endl;

		OQS_STATUS rc;

	        uint8_t public_key[OQS_SIG_sphincs_sha2_128s_simple_length_public_key];
	        uint8_t secret_key[OQS_SIG_sphincs_sha2_128s_simple_length_secret_key];
	        uint8_t message[MESSAGE_LEN];
	        uint8_t signature[OQS_SIG_sphincs_sha2_128s_simple_length_signature];
	        size_t message_len = MESSAGE_LEN;
	        size_t signature_len;
	
	        // let's create a random test message to sign
	        OQS_randombytes(message, message_len);
	
	        rc = OQS_SIG_sphincs_sha2_128s_simple_keypair(public_key, secret_key);
	        if (rc != OQS_SUCCESS) {
       	       		exit(EXIT_FAILURE);
	       	}
	
		auto start = std::chrono::high_resolution_clock::now();
 
		rc = OQS_SIG_sphincs_sha2_128s_simple_sign(signature, &signature_len, message, message_len, secret_key);
	
	        auto stop = std::chrono::high_resolution_clock::now();
		sign_times.push_back(std::chrono::duration_cast<std::chrono::microseconds>(stop - start).count());

		start = std::chrono::high_resolution_clock::now();
	
		rc = OQS_SIG_sphincs_sha2_128s_simple_verify(message, message_len, signature, signature_len, public_key);
		if(rc != OQS_SUCCESS) {
			exit(EXIT_FAILURE);	
		}

	
	        stop = std::chrono::high_resolution_clock::now();
		verify_times.push_back(std::chrono::duration_cast<std::chrono::microseconds>(stop - start).count());

	}

	get_average_sign_time(average_sign_time);
	get_average_verify_time(average_verify_time);
}

int main() {
	
	unsigned long long average_sign_time, average_verify_time;

	std::cout << "Testing Falcon..." << std::endl;

	falcon_tests(average_sign_time, average_verify_time, NUM_ITERATIONS);	

	std::cout << "Average sign time (us):\t\t" << average_sign_time << std::endl;
	std::cout << "Average verify time (us):\t" << average_verify_time << std::endl;

	sign_times.clear();
	verify_times.clear();

	std::cout << "Testing Dilithium..." << std::endl;

	dilithium_tests(average_sign_time, average_verify_time, NUM_ITERATIONS);

	std::cout << "Average sign time (us):\t\t" << average_sign_time << std::endl;
	std::cout << "Average verify time (us):\t" << average_verify_time << std::endl;

	sign_times.clear();
	verify_times.clear();

	std::cout << "Testing Sphincs..." << std::endl;

	sphincs_tests(average_sign_time, average_verify_time, NUM_ITERATIONS);

	std::cout << "Average sign time (us):\t\t" << average_sign_time << std::endl;
	std::cout << "Average verify time (us):\t" << average_verify_time << std::endl;

	sign_times.clear();
	verify_times.clear();


	return 0;
}



